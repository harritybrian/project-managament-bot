#all the imports you could ever want
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
import time
import datetime
import requests
import discord
import pytz
from discord.ext import commands, tasks
from discord.utils import get
from discord.ext.commands import Bot


# Github Username / Pass
username = ''
password = ''

# Useful links
repository_url = "https://github.com/harritybrian/TestRepository"
link_prefix = "https://github.com"

## web_hook retrieval will be automated once discord commands arent ugly and disgusting.
web_hook_discord = "https://discord.com/api/webhooks/1083216793780375614/2muWi9-byE-AoCcrOLOkA7KjRXbV9xmsN9QfPG2_duJUjdsh6xzIM1VuIuO52oU8h-8B"
web_hook_discord_full = web_hook_discord + '/github'
web_hook_link = repository_url + '/settings/hooks/new'

# discord info
#client = discord.Client(intents=discord.Intents.all())
TOKEN = "MTA3MjI5NDI2Mjg3MzU0MjY1Ng.GNFy5B.wTWg-0w9RPRAx-8BRO0tcKJjDWCvsWECJG2rrY"
bot = commands.Bot(command_prefix='/', intents=discord.Intents.all())

channel = '1070473541495029800'

# The on_ready() function will be used to grab the first date.  The notify() function will be used to
# periodically check to make sure updates are reported to the client
def create_web_driver(username, password):
    # Web Driver Options
    options = webdriver.ChromeOptions()
    options.add_argument('headless') ## make sure no window pops up
    #options.add_experimental_option("detach", True)  ## if you want the browser to stay open, uncomment

    # Initialize Web Driver
    driver = webdriver.Chrome(options=options)
    driver.get("https://github.com/login")


    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "login_field")))
    # find username/email field and send the username itself to the input field
    driver.find_element("id", "login_field").send_keys(username)
    # find password input field and insert password as well
    driver.find_element("id", "password").send_keys(password)
    # click login button
    driver.find_element("name", "commit").click()

    # wait for the ready state to be complete
    WebDriverWait(driver=driver, timeout=10).until(
        lambda x: x.execute_script("return document.readyState === 'complete'")
    )
    error_message = "Incorrect username or password."
    # get the errors (if there are any)
    errors = driver.find_elements("css selector", ".flash-error")
    if any(error_message in e.text for e in errors):
        print("[!] Login failed")
    else:
        print("[+] Login successful")

    #repos = driver.find_element("css selector", ".js-repos-container")
    # wait for the repos container to be loaded
    #WebDriverWait(driver=driver, timeout=10).until((lambda x: repos.text != "Loading..."))
    # iterate over the repos and print their names
    #for repo in repos.find_elements("css selector", "li.private"):  # you can use "li.private" for private repos
    #    print(repo.find_element("css selector", "a").get_attribute("href"))

    return driver


def log_out(driver):
    WebDriverWait(driver=driver, timeout=5)
    driver.find_element(By.XPATH, '/html/body/div[1]/div[1]/header/div[7]/details/summary').click()
    WebDriverWait(driver=driver, timeout=100).until(EC.presence_of_element_located((By.CSS_SELECTOR,'.dropdown-item.dropdown-signout')))
    driver.find_element(By.CSS_SELECTOR, '.dropdown-item.dropdown-signout').click()


def create_web_hook_github(repository_url, username, password):
    ## Create new web driver and log in
    driver = create_web_driver(username, password)

    web_hook_link = repository_url + '/settings/hooks/new'

    ## retrieve GitHub web_hook link and open page
    driver.get(web_hook_link)

    ## Wait until web page is loaded before entering data
    WebDriverWait(driver=driver, timeout=1200).until(EC.presence_of_element_located((By.NAME, "hook[url]")))

    ## enter Webhook URL into location
    driver.find_element(By.ID, "hook_url").send_keys(web_hook_discord_full)

    ## auto-fill drop down selector and choose JSON
    selector = Select(driver.find_element(By.ID, "hook_content_type"))
    selector.select_by_value("json")

    ## Select a radio button for all events  -- again, will change once discord commands aren't ugly and disgusting
    driver.find_element(By.ID, "hook-event-choice-everything").click()

    ## submit the form and finalize webhook
    driver.find_element(By.XPATH, '//*[@id="new_hook"]/p[3]/button').click()

    WebDriverWait(driver=driver, timeout=1200)

    #log out of user-profile
    log_out(driver)

    WebDriverWait(driver=driver, timeout=1200)

    #close the driver
    driver.close()


@bot.command()
async def notification(ctx):
    await ctx.send(f'To set up your notification system, start by typing /github')

@bot.command()
async def github(ctx):
    await ctx.send(f'**To begin setting up your GitHub notification system, you will need to look at the following instructions**')
    await ctx.send(f'In order to recieve GitHub notifications, you must be the **owner** of the repository.')
    await ctx.send(f'This will also require you to provide a username and password.')
    await ctx.send(f'Your information will **not** be saved, nor will it be seen by anyone else.')
    await ctx.send(f'To create your webhook, use the following command:')
    await ctx.send(f'Command: /github_login <username here> <password here>')

@bot.command()
async def github_login(ctx, username, password):
    #await ctx.send(f'You entered: {username} and {password}')
    test_login = create_web_driver(username, password)
    error_message = "Incorrect username or password."
    errors = test_login.find_elements("css selector", ".flash-error")
    if any(error_message in e.text for e in errors):
        await ctx.send(f'Login Unsuccessful!')
        test_login.close()
    else:
        await ctx.send(f'Login Successful!')


    repos = test_login.find_element("css selector", ".js-repos-container")
    # wait for the repos container to be loaded
    WebDriverWait(driver=test_login, timeout=10).until((lambda x: repos.text != "Loading..."))
    # iterate over the repos and print their names
    await ctx.send("Here are a list of your repositories:")
    for repo in repos.find_elements("css selector", "li.private"):  # you can use "li.private" for private repos
        await ctx.send(repo.find_element("css selector", "a").get_attribute("href"))
    test_login.close()


@bot.command()
async def github_setup(ctx, username, password, repository_url):
    create_web_hook_github(repository_url, username, password)
    channel = bot.get_channel(1070473541495029800)
    await channel.purge(limit=100)
    await ctx.send(f'You have successfully set up your GitHub notification system!')
    print("success")

@bot.command()
async def get_channel_webhooks(self, ctx):
    # Loops through every webhook linked to the channel
    for hook in await ctx.channel.webhooks():
        hook_channel_id = hook.channel_id
        await ctx.send(f"channel_id of hook: {hook_channel_id}")

@bot.command()
async def chan(msg):
    channel = bot.get_channel(1070473541495029800)
    web= await channel.create_webhook(name= "Test Webook")
    print(web.url)


bot.run(TOKEN)


